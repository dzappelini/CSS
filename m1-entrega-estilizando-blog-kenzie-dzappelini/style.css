/* 
DISPLAY FLEX:
--------------
Flex Container:
O Flex Container é a tag que envolve os itens flex, ao indicar display: flex, essa tag passa a ser um Flex Container.
--------------
flex-direction:
Define a direção dos flex itens. Por padrão ele é row (linha), por isso quando o display: flex; é adicionado, os elementos 
ficam em linha, um do lado do outro.

A mudança de row para column geralmente acontece quando estamos definindo os estilos em media queries para o mobile. 
Assim você garante que o conteúdo seja apresentado em coluna única.
---------------
flex-wrap:
Define se os itens devem quebrar ou não a linha. Por padrão eles não quebram linha, isso faz com que os flex itens sejam 
compactados além do limite do conteúdo.

Essa é geralmente uma propriedade que é quase sempre definida como flex-wrap: wrap; Pois assim quando um dos flex itens 
atinge o limite do conteúdo, o último item passa para a coluna debaixo e assim por diante.
---------------
justify-content:
Alinha os itens flex no container de acordo com a direção. A propriedade só funciona se os itens atuais não ocuparem 
todo o container. Isso significa que ao definir flex: 1; ou algo similar nos itens, a propriedade não terá mais função

Excelente propriedade para ser usada em casos que você deseja alinhar um item na ponta esquerda e outro na direita, 
como em um simples header com marca e navegação.
--------------
align-items:
O align-items alinha os flex itens de acordo com o eixo do container. O alinhamento é diferente para quando os itens 
estão em colunas ou linhas.

Essa propriedade permite o tão sonhado alinhamento central no eixo vertical, algo que antes só era possível com 
diferentes hacks.
--------------
align-content:
Alinha as linhas do container em relação ao eixo vertical. A propriedade só funciona se existir mais de uma linha de 
flex-itens. Para isso o flex-wrap precisa ser wrap.

Além disso o efeito dela apenas será visualizado caso o container seja maior que a soma das linhas dos itens. 
Isso significa que se você não definir height para o container, a propriedade não influencia no layout.
---------------
align-self::cue
O align-self serve para definirmos o alinhamento específico de um único flex item dentro do nosso container. 
Caso um valor seja atribuído, ele passara por cima do que for atribuído no align-items do container.

Vale lembrar que o alinhamento acontece tanto em linha quanto em colunas. Por exemplo o flex-start quando os 
itens estão em linhas, alinha o item ao topo da sua linha. Quando em colunas, alinha o item ao início (esquerda) 
da coluna.
---------------
*/

@import url('https://fonts.googleapis.com/css2?family=Mulish:wght@700&display=swap');

* {
    box-sizing: border-box;
}

nav {
    
}

ul {
    display: flex;
    margin: 0;
    padding: 0;
    width: 50%;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.5);

    
}

li {
    margin: 5px;
}
.a_menu {
    color: white;
    font-size: 1.5em;
    text-align: center;
    text-decoration: underline wavy blue 1px;
}

body {
    font-family: 'Mulish', sans-serif;
    height: 100vh;
    background: rgb(183,234,235);
    background: linear-gradient(0deg, rgba(183,234,235,1) 0%, rgba(245,237,220,1) 100%);
}

main {
    width: 60%;
    margin-left: 20%;
    display: flex;
    flex-direction: column;
    align-items: center;
}

h1 {
    text-align: center;
    color: blue;
}

nav {
    background-color: white;
    display: flex;
    justify-content: center;
}

h2 {
    color: blue;
}


article {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    flex-wrap: wrap;
    border-style: dashed;
    border-color: black;
    background: rgb(183,234,235);
    background: linear-gradient(0deg, rgba(183,234,235,1) 0%, rgba(245,237,220,1) 100%);
    margin-top: 1%;
}